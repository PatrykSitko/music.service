import windowResized from "../../../actions/window/resize";
import mouse from "../../../actions/mouse";

export default store => {
  trackWindowSizeState(store);
  trackMousedownState(store);
  trackMouseclickState(store);
  trackMouseupState(store);
  trackMousemoveState(store);
  trackMouseoverState(store);
  trackMouseoutState(store);
  trackMousewheelState(store);
};

function trackWindowSizeState(store) {
  store.dispatch(
    windowResized({
      inner: { width: window.innerWidth, height: window.innerHeight },
      outer: { width: window.outerWidth, height: window.outerHeight }
    })
  );
  window.addEventListener("resize", event => {
    store.dispatch(
      windowResized({
        ...store.getState().state.window,
        inner: { width: window.innerWidth, height: window.innerHeight },
        outer: { width: window.outerWidth, height: window.outerHeight }
      })
    );
  });
}

function trackMousedownState(store) {
  window.addEventListener("mousedown", event => {
    const {
      altKey,
      bubbles,
      button,
      buttons,
      cancelBubble,
      cancelable,
      clientX,
      clientY,
      composed,
      ctrlKey,
      currentTarget,
      defaultPrevented,
      detail,
      eventPhase,
      fromElement,
      isTrusted,
      layerX,
      layerY,
      metaKey,
      movementX,
      movementY,
      offsetX,
      offsetY,
      pageX,
      pageY,
      path,
      relatedTarget,
      returnValue,
      screenX,
      screenY,
      shiftKey,
      sourceCapabilities,
      srcElement,
      target,
      timeStamp,
      toElement,
      type,
      view,
      which,
      x,
      y,
      __proto__
    } = event;
    store.dispatch(
      mouse.down(
        { ...store.getState().state.mouse, up: false },
        {
          altKey,
          bubbles,
          button,
          buttons,
          cancelBubble,
          cancelable,
          clientX,
          clientY,
          composed,
          ctrlKey,
          currentTarget,
          defaultPrevented,
          detail,
          eventPhase,
          fromElement,
          isTrusted,
          layerX,
          layerY,
          metaKey,
          movementX,
          movementY,
          offsetX,
          offsetY,
          pageX,
          pageY,
          path,
          relatedTarget,
          returnValue,
          screenX,
          screenY,
          shiftKey,
          sourceCapabilities,
          srcElement,
          target,
          timeStamp,
          toElement,
          type,
          view,
          which,
          x,
          y,
          __proto__
        }
      )
    );
  });
}

function trackMouseclickState(store) {
  window.addEventListener("click", event => {
    const {
      altKey,
      bubbles,
      button,
      buttons,
      cancelBubble,
      cancelable,
      clientX,
      clientY,
      composed,
      ctrlKey,
      currentTarget,
      defaultPrevented,
      detail,
      eventPhase,
      fromElement,
      isTrusted,
      layerX,
      layerY,
      metaKey,
      movementX,
      movementY,
      offsetX,
      offsetY,
      pageX,
      pageY,
      path,
      relatedTarget,
      returnValue,
      screenX,
      screenY,
      shiftKey,
      sourceCapabilities,
      srcElement,
      target,
      timeStamp,
      toElement,
      type,
      view,
      which,
      x,
      y,
      __proto__
    } = event;
    store.dispatch(
      mouse.click(
        { ...store.getState().state.mouse },
        {
          altKey,
          bubbles,
          button,
          buttons,
          cancelBubble,
          cancelable,
          clientX,
          clientY,
          composed,
          ctrlKey,
          currentTarget,
          defaultPrevented,
          detail,
          eventPhase,
          fromElement,
          isTrusted,
          layerX,
          layerY,
          metaKey,
          movementX,
          movementY,
          offsetX,
          offsetY,
          pageX,
          pageY,
          path,
          relatedTarget,
          returnValue,
          screenX,
          screenY,
          shiftKey,
          sourceCapabilities,
          srcElement,
          target,
          timeStamp,
          toElement,
          type,
          view,
          which,
          x,
          y,
          __proto__
        }
      )
    );
  });
}

function trackMouseupState(store) {
  window.addEventListener("mouseup", event => {
    const {
      altKey,
      bubbles,
      button,
      buttons,
      cancelBubble,
      cancelable,
      clientX,
      clientY,
      composed,
      ctrlKey,
      currentTarget,
      defaultPrevented,
      detail,
      eventPhase,
      fromElement,
      isTrusted,
      layerX,
      layerY,
      metaKey,
      movementX,
      movementY,
      offsetX,
      offsetY,
      pageX,
      pageY,
      path,
      relatedTarget,
      returnValue,
      screenX,
      screenY,
      shiftKey,
      sourceCapabilities,
      srcElement,
      target,
      timeStamp,
      toElement,
      type,
      view,
      which,
      x,
      y,
      __proto__
    } = event;
    store.dispatch(
      mouse.up(
        { ...store.getState().state.mouse, down: false },
        {
          altKey,
          bubbles,
          button,
          buttons,
          cancelBubble,
          cancelable,
          clientX,
          clientY,
          composed,
          ctrlKey,
          currentTarget,
          defaultPrevented,
          detail,
          eventPhase,
          fromElement,
          isTrusted,
          layerX,
          layerY,
          metaKey,
          movementX,
          movementY,
          offsetX,
          offsetY,
          pageX,
          pageY,
          path,
          relatedTarget,
          returnValue,
          screenX,
          screenY,
          shiftKey,
          sourceCapabilities,
          srcElement,
          target,
          timeStamp,
          toElement,
          type,
          view,
          which,
          x,
          y,
          __proto__
        }
      )
    );
  });
}

function trackMousemoveState(store) {
  window.addEventListener("mousemove", event => {
    const {
      altKey,
      bubbles,
      button,
      buttons,
      cancelBubble,
      cancelable,
      clientX,
      clientY,
      composed,
      ctrlKey,
      currentTarget,
      defaultPrevented,
      detail,
      eventPhase,
      fromElement,
      isTrusted,
      layerX,
      layerY,
      metaKey,
      movementX,
      movementY,
      offsetX,
      offsetY,
      pageX,
      pageY,
      path,
      relatedTarget,
      returnValue,
      screenX,
      screenY,
      shiftKey,
      sourceCapabilities,
      srcElement,
      target,
      timeStamp,
      toElement,
      type,
      view,
      which,
      x,
      y,
      __proto__
    } = event;
    store.dispatch(
      mouse.move(
        { ...store.getState().state.mouse },
        {
          altKey,
          bubbles,
          button,
          buttons,
          cancelBubble,
          cancelable,
          clientX,
          clientY,
          composed,
          ctrlKey,
          currentTarget,
          defaultPrevented,
          detail,
          eventPhase,
          fromElement,
          isTrusted,
          layerX,
          layerY,
          metaKey,
          movementX,
          movementY,
          offsetX,
          offsetY,
          pageX,
          pageY,
          path,
          relatedTarget,
          returnValue,
          screenX,
          screenY,
          shiftKey,
          sourceCapabilities,
          srcElement,
          target,
          timeStamp,
          toElement,
          type,
          view,
          which,
          x,
          y,
          __proto__
        }
      )
    );
  });
}

function trackMouseoverState(store) {
  window.addEventListener("mouseover", event => {
    const {
      altKey,
      bubbles,
      button,
      buttons,
      cancelBubble,
      cancelable,
      clientX,
      clientY,
      composed,
      ctrlKey,
      currentTarget,
      defaultPrevented,
      detail,
      eventPhase,
      fromElement,
      isTrusted,
      layerX,
      layerY,
      metaKey,
      movementX,
      movementY,
      offsetX,
      offsetY,
      pageX,
      pageY,
      path,
      relatedTarget,
      returnValue,
      screenX,
      screenY,
      shiftKey,
      sourceCapabilities,
      srcElement,
      target,
      timeStamp,
      toElement,
      type,
      view,
      which,
      x,
      y,
      __proto__
    } = event;
    store.dispatch(
      mouse.over(
        { ...store.getState().state.mouse },
        {
          altKey,
          bubbles,
          button,
          buttons,
          cancelBubble,
          cancelable,
          clientX,
          clientY,
          composed,
          ctrlKey,
          currentTarget,
          defaultPrevented,
          detail,
          eventPhase,
          fromElement,
          isTrusted,
          layerX,
          layerY,
          metaKey,
          movementX,
          movementY,
          offsetX,
          offsetY,
          pageX,
          pageY,
          path,
          relatedTarget,
          returnValue,
          screenX,
          screenY,
          shiftKey,
          sourceCapabilities,
          srcElement,
          target,
          timeStamp,
          toElement,
          type,
          view,
          which,
          x,
          y,
          __proto__
        }
      )
    );
  });
}

function trackMouseoutState(store) {
  window.addEventListener("mouseout", event => {
    const {
      altKey,
      bubbles,
      button,
      buttons,
      cancelBubble,
      cancelable,
      clientX,
      clientY,
      composed,
      ctrlKey,
      currentTarget,
      defaultPrevented,
      detail,
      eventPhase,
      fromElement,
      isTrusted,
      layerX,
      layerY,
      metaKey,
      movementX,
      movementY,
      offsetX,
      offsetY,
      pageX,
      pageY,
      path,
      relatedTarget,
      returnValue,
      screenX,
      screenY,
      shiftKey,
      sourceCapabilities,
      srcElement,
      target,
      timeStamp,
      toElement,
      type,
      view,
      which,
      x,
      y,
      __proto__
    } = event;
    store.dispatch(
      mouse.out(
        { ...store.getState().state.mouse },
        {
          altKey,
          bubbles,
          button,
          buttons,
          cancelBubble,
          cancelable,
          clientX,
          clientY,
          composed,
          ctrlKey,
          currentTarget,
          defaultPrevented,
          detail,
          eventPhase,
          fromElement,
          isTrusted,
          layerX,
          layerY,
          metaKey,
          movementX,
          movementY,
          offsetX,
          offsetY,
          pageX,
          pageY,
          path,
          relatedTarget,
          returnValue,
          screenX,
          screenY,
          shiftKey,
          sourceCapabilities,
          srcElement,
          target,
          timeStamp,
          toElement,
          type,
          view,
          which,
          x,
          y,
          __proto__
        }
      )
    );
  });
}

function trackMousewheelState(store) {
  window.addEventListener("mousewheel", event => {
    const {
      altKey,
      bubbles,
      button,
      buttons,
      cancelBubble,
      cancelable,
      clientX,
      clientY,
      composed,
      ctrlKey,
      currentTarget,
      defaultPrevented,
      deltaMode,
      deltaX,
      deltaY,
      deltaZ,
      detail,
      eventPhase,
      fromElement,
      isTrusted,
      layerX,
      layerY,
      metaKey,
      movementX,
      movementY,
      offsetX,
      offsetY,
      pageX,
      pageY,
      path,
      relatedTarget,
      returnValue,
      screenX,
      screenY,
      shiftKey,
      sourceCapabilities,
      srcElement,
      target,
      timeStamp,
      toElement,
      type,
      view,
      wheelDelta,
      wheelDeltaX,
      wheelDeltaY,
      which,
      x,
      y,
      __proto__
    } = event;
    store.dispatch(
      mouse.wheel(
        { ...store.getState().state.mouse },
        {
          altKey,
          bubbles,
          button,
          buttons,
          cancelBubble,
          cancelable,
          clientX,
          clientY,
          composed,
          ctrlKey,
          currentTarget,
          defaultPrevented,
          deltaMode,
          deltaX,
          deltaY,
          deltaZ,
          detail,
          eventPhase,
          fromElement,
          isTrusted,
          layerX,
          layerY,
          metaKey,
          movementX,
          movementY,
          offsetX,
          offsetY,
          pageX,
          pageY,
          path,
          relatedTarget,
          returnValue,
          screenX,
          screenY,
          shiftKey,
          sourceCapabilities,
          srcElement,
          target,
          timeStamp,
          toElement,
          type,
          view,
          wheelDelta,
          wheelDeltaX,
          wheelDeltaY,
          which,
          x,
          y,
          __proto__
        }
      )
    );
  });
}
